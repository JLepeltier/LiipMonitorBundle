<?php

namespace Liip\MonitorBundle\DependencyInjection;

use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;

/**
 * This class contains the configuration information for the bundle
 *
 * This information is solely responsible for how the different configuration
 * sections are normalized, and merged.
 *
 * @author Lukas Kahwe Smith <smith@pooteeweet.org>
 */
class Configuration implements ConfigurationInterface
{
    /**
     * Generates the configuration tree.
     *
     * @return TreeBuilder
     */
    public function getConfigTreeBuilder()
    {
        $treeBuilder = new TreeBuilder();
        $rootNode = $treeBuilder->root('liip_monitor', 'array');

        $rootNode
            ->children()
                ->booleanNode('enable_controller')->defaultFalse()->end()
                ->scalarNode('view_template')->defaultNull()->end()
                ->arrayNode('mailer')
                    ->children()
                        ->scalarNode('recipient')->isRequired()->cannotBeEmpty()->end()
                        ->scalarNode('sender')->isRequired()->cannotBeEmpty()->end()
                        ->scalarNode('subject')->isRequired()->cannotBeEmpty()->end()
                    ->end()
                ->end()
                ->arrayNode('checks')
                    ->canBeUnset()
                    ->children()
                        ->arrayNode('php_extensions')
                            ->prototype('scalar')->end()
                        ->end()
                        ->arrayNode('php_flags')
                            ->useAttributeAsKey('setting')
                            ->prototype('scalar')->defaultValue(true)->end()
                        ->end()
                        ->arrayNode('php_version')
                            ->useAttributeAsKey('version')
                            ->prototype('scalar')->end()
                        ->end()
                        ->variableNode('process_running')
                        ->end()
                        ->arrayNode('readable_directory')
                            ->prototype('scalar')->end()
                        ->end()
                        ->arrayNode('writable_directory')
                            ->prototype('scalar')->end()
                        ->end()
                        ->arrayNode('class_exists')
                            ->prototype('scalar')->end()
                        ->end()
                        ->scalarNode('cpu_performance') ->end()
                        ->arrayNode('disk_usage')
                            ->children()
                                ->scalarNode('warning')->defaultValue(70)->end()
                                ->scalarNode('critical')->defaultValue(90)->end()
                                ->scalarNode('path')->defaultValue('%kernel.cache_dir%')->end()
                            ->end()
                        ->end()
                        ->arrayNode('symfony_requirements')
                            ->children()
                                ->scalarNode('file')->defaultValue('%kernel.root_dir%/SymfonyRequirements.php')->end()
                            ->end()
                        ->end()
                        ->arrayNode('opcache_memory')
                            ->children()
                                ->scalarNode('warning')->defaultValue(70)->end()
                                ->scalarNode('critical')->defaultValue(90)->end()
                            ->end()
                        ->end()
                        ->arrayNode('apc_memory')
                            ->children()
                                ->scalarNode('warning')->defaultValue(70)->end()
                                ->scalarNode('critical')->defaultValue(90)->end()
                            ->end()
                        ->end()
                        ->arrayNode('apc_fragmentation')
                            ->children()
                                ->scalarNode('warning')->defaultValue(70)->end()
                                ->scalarNode('critical')->defaultValue(90)->end()
                            ->end()
                        ->end()
                        ->variableNode('doctrine_dbal')
                            ->defaultNull()
                        ->end()
                        ->arrayNode('memcache')
                            ->useAttributeAsKey('name')
                            ->prototype('array')
                                ->children()
                                    ->scalarNode('host')->defaultValue('localhost')->end()
                                    ->scalarNode('port')->defaultValue(11211)->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('redis')
                            ->useAttributeAsKey('name')
                            ->prototype('array')
                                ->children()
                                    ->scalarNode('host')->defaultValue('localhost')->end()
                                    ->scalarNode('port')->defaultValue(6379)->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('http_service')
                            ->useAttributeAsKey('name')
                            ->prototype('array')
                                ->children()
                                    ->scalarNode('host')->defaultValue('localhost')->end()
                                    ->scalarNode('port')->defaultValue(80)->end()
                                    ->scalarNode('path')->defaultValue('/')->end()
                                    ->scalarNode('status_code')->defaultValue(200)->end()
                                    ->scalarNode('content')->defaultNull()->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('guzzle_http_service')
                            ->useAttributeAsKey('name')
                            ->prototype('array')
                                ->children()
                                    ->scalarNode('url')->defaultValue('localhost')->end()
                                    ->variableNode('headers')->defaultValue(array())->end()
                                    ->variableNode('options')->defaultValue(array())->end()
                                    ->scalarNode('status_code')->defaultValue(200)->end()
                                    ->scalarNode('content')->defaultNull()->end()
                                    ->scalarNode('method')->defaultValue('GET')->end()
                                    ->scalarNode('body')->defaultNull()->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('rabbit_mq')
                            ->useAttributeAsKey('name')
                            ->prototype('array')
                                ->children()
                                    ->scalarNode('host')->defaultValue('localhost')->end()
                                    ->scalarNode('port')->defaultValue(5672)->end()
                                    ->scalarNode('user')->defaultValue('guest')->end()
                                    ->scalarNode('password')->defaultValue('guest')->end()
                                    ->scalarNode('vhost')->defaultValue('/')->end()
                                ->end()
                            ->end()
                        ->end()
                        ->booleanNode('symfony_version')->end()
                        ->arrayNode('custom_error_pages')
                            ->children()
                                ->arrayNode('error_codes')
                                    ->isRequired()
                                    ->requiresAtLeastOneElement()
                                    ->prototype('scalar')->end()
                                ->end()
                                ->scalarNode('path')->defaultValue('%kernel.root_dir%')->end()
                                ->scalarNode('controller')->defaultValue('%twig.exception_listener.controller%')->end()
                            ->end()
                        ->end()
                        ->arrayNode('security_advisory')
                            ->children()
                                ->scalarNode('lock_file')->defaultValue('%kernel.root_dir%' . '/../composer.lock')->end()
                            ->end()
                        ->end()
                        ->arrayNode('stream_wrapper_exists')
                            ->prototype('scalar')->end()
                        ->end()
                        ->arrayNode('file_ini')
                            ->prototype('scalar')->end()
                        ->end()
                        ->arrayNode('file_json')
                            ->prototype('scalar')->end()
                        ->end()
                        ->arrayNode('file_xml')
                            ->prototype('scalar')->end()
                        ->end()
                        ->arrayNode('file_yaml')
                            ->prototype('scalar')->end()
                        ->end()
                        ->arrayNode('expressions')
                            ->useAttributeAsKey('alias')
                            ->prototype('array')
                                ->addDefaultsIfNotSet()
                                ->validate()
                                    ->ifTrue(function($value) {
                                        return (!$value['warning_expression'] && !$value['critical_expression']);
                                    })
                                    ->thenInvalid('A warning_expression or a critical_expression must be set.')
                                ->end()
                                ->children()
                                    ->scalarNode('label')->isRequired()->end()
                                    ->scalarNode('warning_expression')
                                        ->defaultNull()
                                    ->end()
                                    ->scalarNode('critical_expression')
                                        ->defaultNull()
                                    ->end()
                                    ->scalarNode('warning_message')->defaultNull()->end()
                                    ->scalarNode('critical_message')->defaultNull()->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
        ->end();

        return $treeBuilder;
    }

}
